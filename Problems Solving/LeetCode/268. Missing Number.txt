solution 1:


class Solution {
public:
    int missingNumber(vector<int>& ar) {
        
      
    int n=ar.size();
    bool seenZero=1;
    bool seenOne=1;
    for(int x:ar){
        
       if (x==0)seenZero=0;
        if(x==1)seenOne=0;
    }
        
    if(seenZero)return 0;
    
    if(n==1 || seenOne)return 1;
    
       
    for(int i:ar){
        
        int x=abs(i);
        
        if(x-1>=0)
        {
            if(ar[x-1]==0)ar[x-1]=-1;
            else if(ar[x-1]>0)
             {
                ar[x-1]*=-1;
            
            }
        }        
    }
    for(int i=0;i<n;i++)
    {
        if(ar[i]>=0)return i+1;
    }
        
    
        
        
        
    return n+1;
    }
};


solution 2:

class Solution {
public:
    int missingNumber(vector<int>& ar) {
    int n=ar.size();
    long long sum=0;
        for(int x:ar){
            
            sum+=x;
        }
        
    return (n*(n+1))/2-sum;
    }
};

solution: 3


class Solution {
public:
    int missingNumber(vector<int>& ar) {
    
     int misNbr=0^computeXOR_1_to_N(ar.size());
    
    for(int x:ar)misNbr^=x;
        
        return misNbr;
    
        
    }
    int computeXOR_1_to_N(int n)
        {

          if (n % 4 == 0)
            return n;

          if (n % 4 == 1)
            return 1;

          if (n % 4 == 2)
            return n + 1;

          return 0;
        }
};