
Solution: 1

/*

Time complexity: O(NlogN)
Space complexity: O(1)


*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        
    sort(s.begin(),s.end());
    sort(t.begin(),t.end());
    return s==t;
    }
};



Solution : 2
/*

Time complexity: O(N) || size of s or t
Space complexity: O(1)


*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        
        return hash(s)==hash(t);
    }
    
    // it different from as usual hash function 
    // here you will get same value for same characture, will not depend on characture positions
    long long hash(string str){
            
        long long base=113;
        long long hashVal = (str[0]-'a'+1)+base;
            
        for(int i = 1; i < str.size();i++){
            hashVal = (hashVal * (base + (str[i] - 'a' + 1))) % 1000000007;
        }
        return hashVal;
    }
};