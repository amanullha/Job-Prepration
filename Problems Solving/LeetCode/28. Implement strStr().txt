//solution 1:

class Solution {
public:
    int strStr(string haystack, string needle) {
        
        if(haystack.size()<needle.size())return -1;
        
        for(int i=0;i<=haystack.size()-needle.size();i++)
        {
            if(needle==haystack.substr(i,needle.size())){
                return i;
            }
        }
        return -1;
    }
};


//solution 2:

class Solution {
public:
    
    vector<long long>hashVal,invOfBase;
    long long base=31,MOD=1000000007;
    
    
    long long expo(long long N, long long P)
    {
        long long result = 1;

        while (P)
        {
            if (P & 1){
                result *= N;
                if(result>=MOD)result%=MOD;
            }
            P >>= 1;
            N *=N;
            if(N>=MOD)N%=MOD;
        }

        return result;
    }

    
    void generateStringHash(string s){
        
        hashVal[0]=s[0]-'a'+1;
        invOfBase[0]=1;
        
        long long p=base;
        
        for(long long i=1;i<s.size();i++){
            
           long long x=s[i]-'a'+1;
            hashVal[i]=(hashVal[i-1]+(x*p))%MOD;
            
            invOfBase[i]=expo(p,MOD-2);
            p=(p*base)%MOD;
            
        }
        cout<<endl;
    }
    
    long long getSubStringHash(long long L,long long R){
        
        long long subHash=hashVal[R];
        
        if(L>0)subHash=(subHash-hashVal[L-1]+MOD)%MOD;
        subHash=(subHash*invOfBase[L])%MOD;
        
        return subHash;
    }
    
    long long getStringHash(string s){
        
      long long hashCount=0;
        long long p=1;
        
        for(char c:s){
            hashCount=(hashCount+(c-'a'+1)*p)%MOD;
            p=(p*base)%MOD;
        }
        return hashCount;
    }
    
    
    int strStr(string haystack, string needle) {
        
        long long needleHash=getStringHash(needle);
        
        long long nLen=needle.size();
        long long hLen=haystack.size();
        
        hashVal.assign(hLen+5,1);
        invOfBase.assign(hLen+5,1);
        
         generateStringHash(haystack);
        
    
        for(long long i=0;i<=hLen-nLen;i++){
       
            if(needleHash==getSubStringHash(i,i+nLen-1)){
                return i;
            }
            
        }
        
        
    
        return -1;
    }
};


solution 3: 

class Solution {
public:
    
    vector<long long>hashVal,powerOfBase;
    long long base=31,MOD=1000000007;


    void generateStringHash(string s)
    {

        hashVal[0]=s[0]-'a'+1;

        powerOfBase[0]=1;
        for(int i=1; i<s.size(); i++)
        {
            int x=s[i]-'a'+1;
            hashVal[i]=((hashVal[i-1]*base)+x)%MOD;

            powerOfBase[i]=(powerOfBase[i-1]*base)%MOD;
        }
    }


    long long getRangeHash(long long L,long long R)
    {
        long long subHash=hashVal[R];

        if(L>0)subHash=(subHash-((hashVal[L-1]*powerOfBase[R-L+1])%MOD)+MOD)%MOD;

        return subHash;
    }


    long long getSubStringHash(string s)
    {
        long long hashCount=0;
        for(char c:s)
        {
            hashCount=((hashCount*base)+c-'a'+1)%MOD;
        }
        return hashCount;
    }


    int strStr(string haystack, string needle) {
        
        long long needleHash=getSubStringHash(needle);
        
        long long nLen=needle.size();
        long long hLen=haystack.size();
        
        hashVal.assign(hLen+5,1);
        powerOfBase.assign(hLen+5,1);
        
         generateStringHash(haystack);
        
    
        for(long long i=0;i<=hLen-nLen;i++){
       
            if(needleHash==getRangeHash(i,i+nLen-1)){
                return i;
            }
            
        }
        
        
    
        return -1;
    }
};